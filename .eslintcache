[{"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\index.js":"1","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\reportWebVitals.js":"2","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\App.js":"3","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\layout\\Header.js":"4","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\layout\\Aside.js":"5","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Panel.js":"6","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\TagContent.js":"7","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Analytics.js":"8","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\TagImage.js":"9","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Library.js":"10","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Settings.js":"11","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Support.js":"12","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\GalleryItem.js":"13","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\ImagePanel.js":"14","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\TagForm.js":"15","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\TagPublishTag.js":"16","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\select\\SelectCustom.jsx":"17","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Application.jsx":"18","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Password.jsx":"19","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Notifications.jsx":"20","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Integrations.jsx":"21","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Profile.jsx":"22","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Billing.jsx":"23","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Home.js":"24","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\badge\\CustomBadge.jsx":"25"},{"size":561,"mtime":1610997670111,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1610997670112,"results":"28","hashOfConfig":"27"},{"size":3018,"mtime":1611337647544,"results":"29","hashOfConfig":"27"},{"size":3904,"mtime":1610997670077,"results":"30","hashOfConfig":"27"},{"size":3199,"mtime":1611337603318,"results":"31","hashOfConfig":"27"},{"size":764,"mtime":1610997670079,"results":"32","hashOfConfig":"27"},{"size":4619,"mtime":1610997670081,"results":"33","hashOfConfig":"27"},{"size":141,"mtime":1610997670078,"results":"34","hashOfConfig":"27"},{"size":3441,"mtime":1610997670085,"results":"35","hashOfConfig":"27"},{"size":8777,"mtime":1611364084345,"results":"36","hashOfConfig":"27"},{"size":2302,"mtime":1611052606927,"results":"37","hashOfConfig":"27"},{"size":1405,"mtime":1610997670080,"results":"38","hashOfConfig":"27"},{"size":593,"mtime":1610997670083,"results":"39","hashOfConfig":"27"},{"size":5478,"mtime":1610997670084,"results":"40","hashOfConfig":"27"},{"size":16301,"mtime":1610997670084,"results":"41","hashOfConfig":"27"},{"size":1353,"mtime":1610997670085,"results":"42","hashOfConfig":"27"},{"size":3394,"mtime":1611364084347,"results":"43","hashOfConfig":"27"},{"size":3965,"mtime":1610997670082,"results":"44","hashOfConfig":"27"},{"size":2689,"mtime":1610997670082,"results":"45","hashOfConfig":"27"},{"size":2214,"mtime":1611048435827,"results":"46","hashOfConfig":"27"},{"size":392,"mtime":1611048847725,"results":"47","hashOfConfig":"27"},{"size":3395,"mtime":1611052204354,"results":"48","hashOfConfig":"27"},{"size":3461,"mtime":1611053436782,"results":"49","hashOfConfig":"27"},{"size":4575,"mtime":1611364007407,"results":"50","hashOfConfig":"27"},{"size":1004,"mtime":1611355651427,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"n0266s",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\index.js",[],["107","108"],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\reportWebVitals.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\App.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\layout\\Header.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\layout\\Aside.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Panel.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\TagContent.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Analytics.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\TagImage.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Library.js",["109","110"],"import { Pagination, Table } from 'react-bootstrap';\r\nimport { SelectCustom } from '../select/SelectCustom';\r\nimport { useState } from 'react';\r\n\r\nconst searchFilters = [\r\n  { title: 'Color', name: 'white' },\r\n  { title: 'Fit', name: 'Relaxed' },\r\n  { title: 'type', name: 'Sweatershirt' },\r\n  { title: 'season', name: 'AW2020' },\r\n  { title: 'Collection', name: 'Main' },\r\n];\r\n\r\nconst tableArr = [\r\n  { status: 'badge-success rounded-circle' },\r\n  { status: 'badge-danger rounded-circle' },\r\n  { status: 'rounded-0 btn-light active' },\r\n];\r\n\r\nexport default function Library() {\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [sortOrder, setSortOrder] = useState('asc');\r\n\r\n  const removeItems = (label) => {\r\n    const filtered = selectedItems.filter((value) => value.label !== label);\r\n    setSelectedItems(filtered);\r\n  };\r\n\r\n  return (\r\n    <div className='panel-content h-100 d-flex flex-column'>\r\n      <div className='row'>\r\n        <div className='col-12 col-md-8 mb-3 mb-md-0'>\r\n          <SelectCustom\r\n            selectedItems={selectedItems}\r\n            setSelectedItems={setSelectedItems}\r\n          />\r\n        </div>\r\n        <div className='col-6 col-md-2'>\r\n          <button type='button' className='btn btn-primary btn-block'>\r\n            Apply\r\n          </button>\r\n        </div>\r\n\r\n        <div className='col-6 col-md-2 ml-auto text-right'>\r\n          <small>\r\n            <span>Export:</span>{' '}\r\n            <a href='#' className='text-underline active'>\r\n              CSV\r\n            </a>\r\n          </small>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='small mt-3'>\r\n        <small>Search filters:</small>\r\n        <div className='row mx-0 mt-2'>\r\n          {selectedItems.map((value) => (\r\n            <button className='btn btn-light px-2 py-0 mr-1 mb-1'>\r\n              <div className='d-flex align-items-center text-muted'>\r\n                <span className='small'>\r\n                  <small className='font-weight-bold text-capitalize'>\r\n                    {value.label}: {value.value}\r\n                  </small>\r\n                </span>\r\n                <span\r\n                  onClick={() => removeItems(value.label)}\r\n                  className='ml-2 h5 mb-0'\r\n                >\r\n                  &times;\r\n                </span>\r\n              </div>\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mt-5'>\r\n        <Table bordered hover className='small border-0'>\r\n          <thead className='small'>\r\n            <tr>\r\n              <th\r\n                onClick={() => setSortOrder((prev) => !prev)}\r\n                className='border-0 active'\r\n              >\r\n                <div className='d-flex  align-items-center'>\r\n                  <span>Date Added</span>\r\n                  <span\r\n                    className={`arrow ${sortOrder ? 'down' : 'up'} ml-1  mb-1`}\r\n                  ></span>\r\n                </div>\r\n              </th>\r\n              <th className='border-0'>Display Title</th>\r\n              <th className='border-0'>Price</th>\r\n              <th className='border-0'>Destination URL</th>\r\n              <th className='border-0'>Content URL</th>\r\n              <th className='border-0 pl-0'>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className='small'>\r\n            {tableArr.map((value) => (\r\n              <tr>\r\n                <td className='p-0' style={{ height: 28 }}>\r\n                  <div className='d-flex h-100 align-items-center px-2'>\r\n                    12/12/2020\r\n                  </div>\r\n                </td>\r\n                <td className='p-0' style={{ height: 28 }}>\r\n                  <div className='d-flex h-100 align-items-center px-2'>\r\n                    Cool Shoes\r\n                  </div>\r\n                </td>\r\n                <td className='p-0' style={{ height: 28 }}>\r\n                  <div className='d-flex h-100 align-items-center px-2'>\r\n                    $600.00\r\n                  </div>\r\n                </td>\r\n                <td className='p-0' style={{ height: 28 }}>\r\n                  <div className='d-flex h-100 align-items-center px-2'>\r\n                    https://nike.co...\r\n                  </div>\r\n                </td>\r\n                <td className='p-0' style={{ height: 28 }}>\r\n                  <div className='d-flex h-100 align-items-center px-2'>\r\n                    https://gq.co...\r\n                  </div>\r\n                </td>\r\n                <td className='p-0' style={{ height: 28, width: 1 }}>\r\n                  <div className='d-flex h-100 align-items-center px-2'>\r\n                    <div className='border-right pr-2 h-100 d-flex align-items-center'>\r\n                      <span\r\n                        className={`badge ${value.status} d-flex`}\r\n                        style={{ height: 10, width: 10 }}\r\n                      ></span>\r\n                    </div>\r\n                    <div className='border-right px-2 h-100 d-flex align-items-center'>\r\n                      <button type='button' className='btn p-0'>\r\n                        <img\r\n                          src={\r\n                            require('../../images/library/icon-1.svg').default\r\n                          }\r\n                          alt='edit'\r\n                        />\r\n                      </button>\r\n                    </div>\r\n                    <div className='pl-2 h-100 d-flex align-items-center'>\r\n                      <button type='button' className='btn p-0'>\r\n                        <img\r\n                          src={\r\n                            require('../../images/library/icon-2.svg').default\r\n                          }\r\n                          alt='edit'\r\n                        />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n\r\n      <div className='ml-auto mt-auto'>\r\n        <Pagination size='sm'>\r\n          <Pagination.First />\r\n          {/* <Pagination.Prev /> */}\r\n          <Pagination.Item>{1}</Pagination.Item>\r\n          <Pagination.Item active>{2}</Pagination.Item>\r\n          <Pagination.Item>{3}</Pagination.Item>\r\n          <Pagination.Ellipsis />\r\n          <Pagination.Item>{14}</Pagination.Item>\r\n          <Pagination.Item>{15}</Pagination.Item>\r\n          <Pagination.Item>{16}</Pagination.Item>\r\n          {/* <Pagination.Next /> */}\r\n          <Pagination.Last />\r\n        </Pagination>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Settings.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Support.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\GalleryItem.js",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\ImagePanel.js",["111"],"import React, { useState } from 'react'\r\nimport Draggable from \"react-draggable\"\r\nimport { useLocation } from \"react-router-dom\"\r\nimport \"../../../css/imagePanel.css\"\r\n\r\nexport default function ImagePanel({ setScreen, tagActive, setTagActive, tags, updateTag, setTags, priceOption }) {\r\n  let location = useLocation()\r\n  const image = location.pathname.split(\"/\")\r\n  const imgElement = React.useRef(null)\r\n  const [theme, setTheme] = useState(\"dark-\")\r\n  const [tagMessage, setTagMessage] = useState(false)\r\n  const [tagDirection, setTagDirection] = useState(false)\r\n\r\n  const eventLogger = (e, data) => {\r\n    console.log(\"Event: \", e)\r\n    console.log(\"Data: \", data)\r\n\r\n    updateTag(\"x\", tagActive, data.x)\r\n    updateTag(\"y\", tagActive, data.y)\r\n  }\r\n  const addTag = (y, x) => {\r\n    let tag = {\r\n      title: \"New Tag\",\r\n      url: \"url\",\r\n      subTitle: \"Sub Text\",\r\n      price: \"0\",\r\n      currency: priceOption,\r\n      attribute: [],\r\n      x,\r\n      y,\r\n      direction: \"up\",\r\n      showSubTitle: true,\r\n      showPrice: false,\r\n      error: {\r\n        error: true,\r\n        titleError: true,\r\n        urlError: true,\r\n        subTitleError: false\r\n      }\r\n    }\r\n    setTags([...tags, tag])\r\n    setTagActive(tags.length)\r\n    setScreen(\"tags\")\r\n  }\r\n\r\n  const deleteTag = (index) => {\r\n    index === tags.length - 1 && setTagActive(tags.length - 2)\r\n    var arr = [...tags]\r\n    arr = arr.filter((item, i) => i !== index)\r\n    setTags(arr)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    tags.length > 0\r\n      ? setScreen(\"tags\")\r\n      : setScreen(\"home\")\r\n  }, [tagActive])\r\n\r\n  return (\r\n    <div className=\"image-detail\">\r\n      <div\r\n        className={`theme dark-theme ${theme === \"dark-\" ? \"active\" : \"\"}`}\r\n        onClick={() => { setTheme(\"dark-\") }}\r\n      >\r\n      </div>\r\n      <div\r\n        className={`theme light-theme ${theme === \"light-\" ? \"active\" : \"\"}`}\r\n        onClick={() => { setTheme(\"light-\") }}\r\n      >\r\n      </div>\r\n      <div className=\"brush\">\r\n        <img src={require(\"../../../images/main/tagContent/tagImage/icons/brush.svg\").default} alt=\"Brush\" />\r\n      </div>\r\n      <div\r\n        className={`bin ${tagMessage ? \"active\" : \"\"}`}\r\n        onClick={() => { setTagMessage(!tagMessage) }}\r\n      >\r\n        <img src={require(\"../../../images/main/tagContent/tagImage/icons/bin.svg\").default} alt=\"Bin\" />\r\n      </div>\r\n      <div\r\n        className={`tag-direction ${tagDirection ? \"active\" : \"\"}`}\r\n        onClick={() => { setTagDirection(!tagDirection) }}\r\n      >\r\n        <img src={require(\"../../../images/main/tagContent/tagImage/icons/tag-direction.svg\").default} alt=\"Bin\" />\r\n      </div>\r\n      <div className=\"imageContainer\">\r\n        <div\r\n          className=\"tag-area\" id=\"tag-area\" onClick={() => { setScreen(\"tags\") }}>\r\n          {tags.map((item, index) => {\r\n            return (\r\n              <Draggable\r\n                key={index}\r\n                bounds=\"parent\"\r\n                defaultPosition={{ x: item.x, y: item.y }}\r\n                position={{ x: item.x, y: item.y }}\r\n                scale={1}\r\n                onStop={eventLogger}\r\n              >\r\n                <div\r\n                  key={index}\r\n                  className={`tag ${index === tagActive ? \"active \" + theme + \"green\" : theme} ${item.direction === \"up\" ? \"direction-up\" : \"direction-down\"}`}\r\n                  onMouseDownCapture={() => { setTagActive(index) }}\r\n                >\r\n                  <div\r\n                    className={`direction-toggle up ${tagDirection && tagActive === index ? \"\" : \"d-none\"}`}\r\n                    onClick={() => { updateTag(\"direction\", tagActive, \"up\") }}\r\n                  ></div>\r\n                  <div>\r\n                    <p>{item.title}</p>\r\n                    <p>\r\n                      {item.showSubTitle && item.subTitle}\r\n                      <span className=\"pl-2\">{item.showPrice && item.currency + item.price}</span>\r\n                    </p>\r\n                  </div>\r\n                  <div className={`message ${item.error.error ? \"\" : \"d-none\"}`}>\r\n                    <img src={require(\"../../../images/main/tagContent/tagImage/icons/error.svg\").default} alt=\"Error In Tag\" />\r\n                  </div>\r\n                  <div className=\"message\">\r\n                    <img\r\n                      className={tagMessage ? \"\" : \"d-none\"}\r\n                      onClick={() => { deleteTag(index) }}\r\n                      src={require(\"../../../images/main/tagContent/tagImage/icons/delete.svg\").default}\r\n                      alt=\"Delete Tag\"\r\n                    />\r\n                  </div>\r\n                  <div\r\n                    className={`direction-toggle down ${tagDirection ? \"\" : \"d-none\"}`}\r\n                    onClick={() => { updateTag(\"direction\", tagActive, \"down\") }}\r\n                  ></div>\r\n                </div>\r\n              </Draggable>\r\n            )\r\n          })}\r\n          <img\r\n            className=\"workingImage\"\r\n            onClick={(e) => addTag(e.nativeEvent.offsetY, e.nativeEvent.offsetX)}\r\n            ref={imgElement}\r\n            src={`../../../images/main/tagContent/gallery/${image[3]}`}\r\n            alt=\"tag-img\"\r\n          />\r\n          <div className={`tag-icon ${theme === \"light-\" ? \"tag-icon-light\" : \"tag-icon-dark\"}`} >\r\n            <img src={require(\"../../../images/main/tagContent/tagImage/icons/tag.svg\").default} alt=\"Brush\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\TagForm.js",["112","113","114","115","116"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport \"../../../css/tagForm.css\"\r\n\r\nexport default function TagForm({ item, index, screen, setScreen, tags, setTags, tagActive, setTagActive, updateTag, priceOption, setPriceOption }) {\r\n  let [advanceSetting, setAdvanceSetting] = useState(false)\r\n\r\n  let [fieldDetail, setFieldDetail] = useState([{\r\n    \"title\": false,\r\n    \"url\": false,\r\n    \"subTitle\": false,\r\n    \"price\": false,\r\n    \"attributes\": false,\r\n  }])\r\n\r\n  let [priceOptionVisibe, setPriceOptionVisibe] = useState(false)\r\n  let [attriOptionVisibe, setAttriOptionVisibe] = useState(false)\r\n  let [attriValueVisibe, setAttriValueVisibe] = useState(false)\r\n\r\n  const setPriceOptionFun = (e) => {\r\n    setPriceOption(e.target.innerHTML)\r\n    updateTag(\"currency\", tagActive, e.target.innerHTML)\r\n  }\r\n\r\n  const toggle = (field, index) => {\r\n    let updated = [...tags]\r\n    updated[index][field] = !updated[tagActive][field]\r\n    setTags(updated)\r\n  }\r\n\r\n  const toggleFieldDetail = (field) => {\r\n    let temp = [...fieldDetail]\r\n    temp[field] = !fieldDetail[field]\r\n    setFieldDetail(temp)\r\n  }\r\n\r\n\r\n  const [attri, setAttri] = useState([])\r\n\r\n  let addAttri = () => {\r\n    if (\r\n      !attri.some(e => e[activeAttriOption] === activeAttriValue) &&\r\n      activeAttriOption !== \"\" &&\r\n      activeAttriValue !== \"\"\r\n    ) {\r\n      setAttri([...attri, { [activeAttriOption]: activeAttriValue }])\r\n      setActiveAttriValue(\"\")\r\n    }\r\n  }\r\n\r\n  let deleteAttri = (e) => {\r\n    let str = e.currentTarget.parentNode.childNodes[0].innerHTML.split(\":\")\r\n    let option = str[0]\r\n    let value = str[1].substring(1)\r\n\r\n    let arr = []\r\n    Object.entries(attri).map(([key, k]) => (\r\n      Object.entries(k).map((v) => {\r\n        if (v[0] === option && v[1] === value) { }\r\n        else arr = [...arr, { [v[0]]: v[1] }]\r\n      })\r\n    ))\r\n    setAttri(arr)\r\n  }\r\n\r\n  useEffect(() => (\r\n    updateTag(\"attribute\", index, attri)\r\n  ), [attri])\r\n\r\n\r\n  const attriOptopmSpan = useRef(\"\");\r\n  const [addAttriOptionToggle, setAddAttriOptionToggle] = useState(false)\r\n  const [activeAttriOption, setActiveAttriOption] = useState(\"\")\r\n  const [attriOption, setAttriOption] = useState([])\r\n\r\n  const [attriInputStyle, setSttriInputStyle] = useState({\r\n    width: \"50px\",\r\n    border: \"none\"\r\n  })\r\n\r\n  let attriOptionInputFunc = (e) => {\r\n    setActiveAttriOption(e.target.value)\r\n    setSttriInputStyle({\r\n      minWidth: '50px',\r\n      width: attriOptopmSpan.current.scrollWidth + 8,\r\n      border: \"none\"\r\n    })\r\n  }\r\n\r\n  let addAttriOptionFunc = () => {\r\n    if (attriOption.includes(activeAttriOption) || activeAttriOption === \"\") {\r\n      setAddAttriOptionToggle(false)\r\n    } else {\r\n      setAttriOption([...attriOption, activeAttriOption])\r\n      setAddAttriOptionToggle(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => (\r\n    addAttriOptionToggle ? setAttriOptionVisibe(false) : () => { }\r\n  ), [addAttriOptionToggle])\r\n\r\n\r\n  const [activeAttriValue, setActiveAttriValue] = useState(\"\")\r\n  const [attriValue, setAttriValue] = useState([])\r\n\r\n  let attriValueInputFunc = (e) => {\r\n    if (e.key === 'Enter') {\r\n      addAttriValueFunc(e)\r\n      e.target.blur();\r\n    } else {\r\n      setActiveAttriValue(e.target.value)\r\n    }\r\n  }\r\n\r\n  let addAttriValueFunc = (e) => {\r\n    setActiveAttriOption(\"\")\r\n    e.target.value = null\r\n    setAttriValueVisibe(false)\r\n    if (!attriValue.includes(activeAttriValue) && activeAttriValue !== \"\") {\r\n      setAttriValue([...attriValue, activeAttriValue])\r\n    }\r\n    addAttri()\r\n  }\r\n\r\n  let beforeSave = () => {\r\n    let publish = true\r\n\r\n    tags.map((v, i) => {\r\n      if (v.error[\"titleError\"] || v.error[\"urlError\"]) {\r\n        setTagActive(i)\r\n        publish = false\r\n        return\r\n      }\r\n    })\r\n\r\n    publish && setScreen(\"publish\")\r\n  }\r\n\r\n  useEffect(() => (\r\n    setAttriOptionVisibe(false)\r\n  ), [attriValueVisibe])\r\n\r\n  return (\r\n    <div className={`tag-detail-layer ${screen === \"tags\" ? tagActive === index ? \"\" : \"d-none\" : \"d-none\"}`} >\r\n      <ul className=\"tag-status\">\r\n        <li>Tag Details</li>\r\n        <li>\r\n          <span></span>\r\n        </li>\r\n        <li>Enabled</li>\r\n      </ul>\r\n      <div className=\"field-area\">\r\n        <div className=\"field-label\">\r\n          <ul className=\"dual-section\">\r\n            <li>Display Title</li>\r\n            <li className=\"align-right field-detail\">\r\n              <img\r\n                onClick={() => toggleFieldDetail(\"title\")}\r\n                className={fieldDetail[\"title\"] ? \"active\" : \"\"}\r\n                src={require(\"./../../../images/main/tagContent/tagForm/info.svg\").default}\r\n                alt=\"Detail\" />\r\n              <p className=\"field-detail-popup\">The most prominent text that <br />shows up on the tag.</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className={`input-container input-container-error ${item.error.titleError ? \"error\" : \"\"}`}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Title\"\r\n            onChange={(e) => updateTag(\"title\", index, e.target.value)}\r\n          />\r\n          <span>25</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"field-area\">\r\n        <div className=\"field-label\">\r\n          <ul className=\"dual-section\">\r\n            <li>Destination URL</li>\r\n            <li className=\"align-right field-detail\">\r\n              <img\r\n                onClick={() => toggleFieldDetail(\"url\")}\r\n                className={fieldDetail[\"url\"] ? \"active\" : \"\"}\r\n                src={require(\"./../../../images/main/tagContent/tagForm/info.svg\").default}\r\n                alt=\"Detail\" />\r\n              <p className=\"field-detail-popup\">The URL the tag links to when <br />clicked.</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className={`input-container input-container-error ${item.error.urlError ? \"error\" : \"\"}`}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"URL\"\r\n            onChange={(e) => updateTag(\"url\", index, e.target.value)}\r\n          />\r\n          <span>\r\n            <span></span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"field-area field-area-radio\">\r\n        <div>\r\n          <div className=\"field-label\">\r\n            <ul className=\"dual-section\">\r\n              <li>Sub Title</li>\r\n              <li className=\"align-right field-detail\">\r\n                <img\r\n                  onClick={() => toggleFieldDetail(\"subTitle\")}\r\n                  className={fieldDetail[\"subTitle\"] ? \"active\" : \"\"}\r\n                  src={require(\"./../../../images/main/tagContent/tagForm/info.svg\").default}\r\n                  alt=\"Detail\" />\r\n                <p className=\"field-detail-popup\">Optional text under the Display <br />Title of your tag.</p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className={`input-container input-container-error ${item.error.subTitleError ? \"error\" : \"\"}`}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Sub Title\"\r\n              onChange={(e) => updateTag(\"subTitle\", index, e.target.value)}\r\n            />\r\n            <span>20</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"radio\">\r\n          <div\r\n            className={`radio-button ${item.showSubTitle ? \"\" : \"disable\"}`}\r\n            onClick={() => toggle('showSubTitle', index)}\r\n          >\r\n            <div className=\"radio-dot\"></div>\r\n          </div>\r\n          <p className=\"radio-label\">{item.showSubTitle ? \"Visible\" : \"Hidden\"}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"field-area field-area-radio\">\r\n        <div>\r\n          <div className=\"field-label\">\r\n            <ul className=\"dual-section\">\r\n              <li>Price</li>\r\n              <li className=\"align-right field-detail\">\r\n                <img\r\n                  onClick={() => toggleFieldDetail(\"price\")}\r\n                  className={fieldDetail[\"price\"] ? \"active\" : \"\"}\r\n                  src={require(\"./../../../images/main/tagContent/tagForm/info.svg\").default}\r\n                  alt=\"Detail\" />\r\n                <p className=\"field-detail-popup\">Optional price field displayed in <br />the bottom right corner of a tag.</p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"price-dropdown\">\r\n            <div\r\n              className=\"price-select\"\r\n              onClick={() => { setPriceOptionVisibe(!priceOptionVisibe) }}\r\n            >\r\n              <img\r\n                src={require(\"../../../images/main/tagContent/down-arrow.svg\").default}\r\n                alt=\"Open Menu\"\r\n              />\r\n              <span>{item.currency}</span>\r\n              <ul className={`price-option  ${priceOptionVisibe ? \"\" : \"d-none\"}`}>\r\n                <li\r\n                  className={priceOption === \"$\" ? \"active\" : \"\"}\r\n                  onClick={(e) => { setPriceOptionFun(e) }}\r\n                >$</li>\r\n                <li\r\n                  className={priceOption === \"€\" ? \"active\" : \"\"}\r\n                  onClick={(e) => { setPriceOptionFun(e) }}\r\n                >€</li>\r\n                <li\r\n                  className={priceOption === \"£\" ? \"active\" : \"\"}\r\n                  onClick={(e) => { setPriceOptionFun(e) }}\r\n                >£</li>\r\n                <li\r\n                  className={priceOption === \"¥\" ? \"active\" : \"\"}\r\n                  onClick={(e) => { setPriceOptionFun(e) }}\r\n                >¥</li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"input-container\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Price\"\r\n                onChange={(e) => updateTag(\"price\", index, e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"radio\">\r\n          <div\r\n            className={`radio-button ${item.showPrice ? \"\" : \"disable\"}`}\r\n            onClick={() => toggle('showPrice', index)}\r\n          >\r\n            <div className=\"radio-dot\"></div>\r\n          </div>\r\n          <p className=\"radio-label\">{item.showPrice ? \"Visible\" : \"Hidden\"}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"field-area\">\r\n        <div className=\"field-label\">\r\n          <ul className=\"dual-section\">\r\n            <li>Add Attributes</li>\r\n            <li className=\"align-right field-detail\">\r\n              <img\r\n                onClick={() => toggleFieldDetail(\"attribute\")}\r\n                className={fieldDetail[\"attribute\"] ? \"active\" : \"\"}\r\n                src={require(\"./../../../images/main/tagContent/tagForm/info.svg\").default}\r\n                alt=\"Detail\" />\r\n              <p className=\"field-detail-popup\">Add important information as Attributes to your tag. <br />Some examples include: Brand, SKU, Type, or Model.</p>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <div className=\"attribute-dropdown\">\r\n            <div\r\n              className=\"attribute-option-select\"\r\n              onClick={() => (addAttriOptionToggle ? () => { } : setAttriOptionVisibe(!attriOptionVisibe))}\r\n            >\r\n              <img\r\n                onClick={() => { setAttriOptionVisibe(!attriOptionVisibe) }}\r\n                src={require(\"../../../images/main/tagContent/down-arrow.svg\").default}\r\n                alt=\"Open Menu\"\r\n              />\r\n              <span\r\n                className={addAttriOptionToggle ? \"position-absolute invisible\" : \"\"}\r\n                ref={attriOptopmSpan}\r\n              >\r\n                {activeAttriOption}\r\n              </span>\r\n              <span>\r\n                <input\r\n                  value={activeAttriOption}\r\n                  type=\"text\"\r\n                  placeholder=\"Attr\"\r\n                  onChange={attriOptionInputFunc}\r\n                  onBlur={addAttriOptionFunc}\r\n                  style={attriInputStyle}\r\n                  className={addAttriOptionToggle ? \"\" : \"d-none\"}\r\n                />\r\n              </span>\r\n\r\n              <ul\r\n                className={`attribute-option  ${attriOptionVisibe ? \"\" : \"d-none\"}`}>\r\n                {attriOption.map((option, otionIndex) => {\r\n                  return (\r\n                    <li\r\n                      key={otionIndex}\r\n                      onClick={() => { setActiveAttriOption(option) }}\r\n                    >{option}</li>\r\n                  )\r\n                })}\r\n                <li onClick={(e) => { setAddAttriOptionToggle(true) }}>Create New</li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div className=\"input-container\">\r\n              <div className=\"attribute-value-select\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Attribute\"\r\n                  onKeyUp={attriValueInputFunc}\r\n                  onBlur={addAttriValueFunc}\r\n                  onFocus={() => (setAttriValueVisibe(true))}\r\n                />\r\n                <ul\r\n                  className={`attribute-option  ${attriValueVisibe ? \"\" : \"d-none\"}`}>\r\n                  {attriValue.map((value, valueIndex) => {\r\n                    if (value.includes(activeAttriValue)) {\r\n                      return (\r\n                        <li\r\n                          key={valueIndex}\r\n                          onMouseDownCapture={() => { setActiveAttriValue(value) }}\r\n                          onMouseUpCapture={() => { addAttri() }}\r\n                        >{value}</li>\r\n                      )\r\n                    }\r\n                  })}\r\n                  <li>Create New</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"attribute-tag-area\">\r\n        {\r\n          Object.entries(attri).map(([key, value]) => (\r\n            Object.entries(value).map(([option, value]) => {\r\n              return (\r\n                <div\r\n                  className=\"attribute-tag\"\r\n                ><p>{option}: {value.toString()}</p>\r\n                  <span\r\n                    onClick={(e) => { deleteAttri(e) }}\r\n                  >\r\n                    <img\r\n                      src={require(\"../../../images/main/tagContent/tagForm/remove-attribute-tag.svg\").default}\r\n                      alt=\"Remove Attribute Tag\"\r\n                    />\r\n                  </span>\r\n                </div>\r\n              )\r\n            })\r\n          ))\r\n        }\r\n      </div>\r\n      <div className=\"advance-setting-area\">\r\n        <div className=\"advance-setting-toggle\">\r\n          <span className=\"secondary\">Advanced Settings</span>\r\n          <button>\r\n            <img\r\n              className={advanceSetting ? \"active\" : \"\"}\r\n              onClick={() => { setAdvanceSetting(!advanceSetting) }}\r\n              src={require(\"../../../images/main/tagContent/right-arrow.svg\").default}\r\n              alt=\"Expend\"\r\n            />\r\n          </button>\r\n          <p className={`secondary ${advanceSetting ? \"\" : \"d-none\"}`}>\r\n            Please note changes to UTM campaign name, term and content\r\n            will overwrite any tracking settings Scopa automatically\r\n            generates for your tag.\r\n                </p>\r\n        </div>\r\n        <div className={`field-area ${advanceSetting ? \"\" : \"d-none\"}`}>\r\n          <div className=\"field-label\">UTM Campaign Name</div>\r\n          <div className=\"input-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Local Optimist, Crewneck Sweatshirt, White, Urban\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className={`field-area ${advanceSetting ? \"\" : \"d-none\"}`}>\r\n          <div className=\"field-label\">UTM Campaign Name</div>\r\n          <div className=\"input-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Local Optimist, Crewneck Sweatshirt, White, Urban\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-action\">\r\n        <input\r\n          className=\"primary-btn\"\r\n          type=\"button\"\r\n          value=\"Save\"\r\n          onClick={() => { beforeSave() }}\r\n        />\r\n        <input\r\n          className=\"secondary-btn\"\r\n          onClick={() => { setScreen(\"home\") }}\r\n          type=\"button\"\r\n          value=\"Cancel\"\r\n        />\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tagContent\\TagPublishTag.js",["117"],"import React, { useState } from 'react'\r\nimport \"../../../css/tagPublish.css\"\r\n\r\nexport default function TagPublishTag({ screen, setScreen, tags }) {\r\n\r\n  let [tagDisableLength, setTagDisableLength] = useState(0)\r\n\r\n  React.useEffect(() => {\r\n    if (tags.length > 0) {\r\n      let temp = 0\r\n      tags.map(v => (v.error.error && temp++))\r\n      setTagDisableLength(temp)\r\n    } else if (tags.length === 0) { setScreen(\"home\") }\r\n  }, [tags])\r\n\r\n  return (\r\n    <div className={`tag-unpublish-layer ${screen !== \"publish\" && \"d-none\"}`} >\r\n      <ul className=\"tag-status\">\r\n        <li>\r\n          {` \r\n            ${tags.length - tagDisableLength} Tag Unpublished  \r\n            ${tagDisableLength > 0 && tagDisableLength + \" Disabled\"} \r\n            `}\r\n        </li>\r\n      </ul>\r\n      <p>Click on the image to continue adding or editing tags. </p>\r\n      <p>Once your finished making your tags, make sure to Save and then Publlish.</p>\r\n      <div className=\"form-action\">\r\n        <input className=\"primary-btn\" type=\"button\" value=\"Publish\" />\r\n        <input\r\n          className=\"secondary-btn\"\r\n          type=\"button\"\r\n          value=\"Back\"\r\n          onClick={\r\n            tags.length < 1\r\n              ? () => { setScreen(\"home\") }\r\n              : () => { setScreen(\"tags\") }\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\select\\SelectCustom.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Application.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Password.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Notifications.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Integrations.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Profile.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\tabSettings\\Billing.jsx",[],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\pages\\Home.js",["118"],"C:\\Users\\-Nk-\\Desktop\\omer\\settings-app\\src\\components\\badge\\CustomBadge.jsx",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":5,"column":7,"nodeType":"125","messageId":"126","endLine":5,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":46,"column":13,"nodeType":"129","endLine":46,"endColumn":59},{"ruleId":"130","severity":1,"message":"131","line":57,"column":6,"nodeType":"132","endLine":57,"endColumn":17,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":57,"column":33,"nodeType":"136","messageId":"137","endLine":57,"endColumn":35},{"ruleId":"130","severity":1,"message":"138","line":67,"column":6,"nodeType":"132","endLine":67,"endColumn":13,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":128,"column":21,"nodeType":"136","messageId":"141","endLine":128,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":132,"column":9,"nodeType":"142","messageId":"143","endLine":132,"endColumn":15},{"ruleId":"134","severity":1,"message":"140","line":365,"column":55,"nodeType":"136","messageId":"141","endLine":365,"endColumn":57},{"ruleId":"130","severity":1,"message":"144","line":14,"column":6,"nodeType":"132","endLine":14,"endColumn":12,"suggestions":"145"},{"ruleId":"123","severity":1,"message":"146","line":42,"column":9,"nodeType":"125","messageId":"126","endLine":42,"endColumn":20},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'searchFilters' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'setScreen' and 'tags.length'. Either include them or remove the dependency array. If 'setScreen' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["149"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'index' and 'updateTag'. Either include them or remove the dependency array. If 'updateTag' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["150"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","React Hook React.useEffect has a missing dependency: 'setScreen'. Either include it or remove the dependency array. If 'setScreen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["151"],"'removeItems' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [setScreen, tagActive, tags.length]",{"range":"158","text":"159"},"Update the dependencies array to be: [attri, index, updateTag]",{"range":"160","text":"161"},"Update the dependencies array to be: [setScreen, tags]",{"range":"162","text":"163"},[1572,1583],"[setScreen, tagActive, tags.length]",[1953,1960],"[attri, index, updateTag]",[434,440],"[setScreen, tags]"]